// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	io "io"

	genericclioptions "k8s.io/cli-runtime/pkg/genericclioptions"
	dynamic "k8s.io/client-go/dynamic"

	k8s "github.com/ForgeRock/forgeops-cli/internal/k8s"

	kubernetes "k8s.io/client-go/kubernetes"

	mock "github.com/stretchr/testify/mock"

	resource "k8s.io/cli-runtime/pkg/resource"

	rest "k8s.io/client-go/rest"

	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// ClientMgr is an autogenerated mock type for the ClientMgr type
type ClientMgr struct {
	mock.Mock
}

// ApplyObject provides a mock function with given fields: info
func (_m *ClientMgr) ApplyObject(info *resource.Info) error {
	ret := _m.Called(info)

	var r0 error
	if rf, ok := ret.Get(0).(func(*resource.Info) error); ok {
		r0 = rf(info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Builder provides a mock function with given fields:
func (_m *ClientMgr) Builder() *resource.Builder {
	ret := _m.Called()

	var r0 *resource.Builder
	if rf, ok := ret.Get(0).(func() *resource.Builder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resource.Builder)
		}
	}

	return r0
}

// DeleteObject provides a mock function with given fields: info
func (_m *ClientMgr) DeleteObject(info *resource.Info) error {
	ret := _m.Called(info)

	var r0 error
	if rf, ok := ret.Get(0).(func(*resource.Info) error); ok {
		r0 = rf(info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DynamicClient provides a mock function with given fields:
func (_m *ClientMgr) DynamicClient() (dynamic.Interface, error) {
	ret := _m.Called()

	var r0 dynamic.Interface
	if rf, ok := ret.Get(0).(func() dynamic.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynamic.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectsFromPath provides a mock function with given fields: path
func (_m *ClientMgr) GetObjectsFromPath(path string) ([]*resource.Info, error) {
	ret := _m.Called(path)

	var r0 []*resource.Info
	if rf, ok := ret.Get(0).(func(string) []*resource.Info); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*resource.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectsFromServer provides a mock function with given fields: resourceType, name
func (_m *ClientMgr) GetObjectsFromServer(resourceType string, name string) ([]*resource.Info, error) {
	ret := _m.Called(resourceType, name)

	var r0 []*resource.Info
	if rf, ok := ret.Get(0).(func(string, string) []*resource.Info); ok {
		r0 = rf(resourceType, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*resource.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(resourceType, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectsFromStream provides a mock function with given fields: reader
func (_m *ClientMgr) GetObjectsFromStream(reader io.Reader) ([]*resource.Info, error) {
	ret := _m.Called(reader)

	var r0 []*resource.Info
	if rf, ok := ret.Get(0).(func(io.Reader) []*resource.Info); ok {
		r0 = rf(reader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*resource.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(reader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOverrideFlags provides a mock function with given fields:
func (_m *ClientMgr) GetOverrideFlags() (*genericclioptions.ConfigFlags, error) {
	ret := _m.Called()

	var r0 *genericclioptions.ConfigFlags
	if rf, ok := ret.Get(0).(func() *genericclioptions.ConfigFlags); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*genericclioptions.ConfigFlags)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Namespace provides a mock function with given fields:
func (_m *ClientMgr) Namespace() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestConfig provides a mock function with given fields:
func (_m *ClientMgr) RestConfig() (*rest.Config, error) {
	ret := _m.Called()

	var r0 *rest.Config
	if rf, ok := ret.Get(0).(func() *rest.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StaticClient provides a mock function with given fields:
func (_m *ClientMgr) StaticClient() (*kubernetes.Clientset, error) {
	ret := _m.Called()

	var r0 *kubernetes.Clientset
	if rf, ok := ret.Get(0).(func() *kubernetes.Clientset); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Clientset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitForResource provides a mock function with given fields: timeoutSecs, ns, name, gvr
func (_m *ClientMgr) WaitForResource(timeoutSecs int, ns string, name string, gvr schema.GroupVersionResource) (bool, error) {
	ret := _m.Called(timeoutSecs, ns, name, gvr)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, string, string, schema.GroupVersionResource) bool); ok {
		r0 = rf(timeoutSecs, ns, name, gvr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string, schema.GroupVersionResource) error); ok {
		r1 = rf(timeoutSecs, ns, name, gvr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitForResourceReplicas provides a mock function with given fields: timeoutSecs, ns, name, replicas, gvr
func (_m *ClientMgr) WaitForResourceReplicas(timeoutSecs int, ns string, name string, replicas string, gvr schema.GroupVersionResource) (bool, error) {
	ret := _m.Called(timeoutSecs, ns, name, replicas, gvr)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, string, string, string, schema.GroupVersionResource) bool); ok {
		r0 = rf(timeoutSecs, ns, name, replicas, gvr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string, string, schema.GroupVersionResource) error); ok {
		r1 = rf(timeoutSecs, ns, name, replicas, gvr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitForResourceStatusCondition provides a mock function with given fields: timeoutSecs, ns, name, conditionStr, gvr
func (_m *ClientMgr) WaitForResourceStatusCondition(timeoutSecs int, ns string, name string, conditionStr string, gvr schema.GroupVersionResource) (bool, error) {
	ret := _m.Called(timeoutSecs, ns, name, conditionStr, gvr)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, string, string, string, schema.GroupVersionResource) bool); ok {
		r0 = rf(timeoutSecs, ns, name, conditionStr, gvr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string, string, schema.GroupVersionResource) error); ok {
		r1 = rf(timeoutSecs, ns, name, conditionStr, gvr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchEventsForCondition provides a mock function with given fields: timeoutSecs, ns, name, gvr, condition
func (_m *ClientMgr) WatchEventsForCondition(timeoutSecs int, ns string, name string, gvr schema.GroupVersionResource, condition k8s.ConditionFunction) (bool, error) {
	ret := _m.Called(timeoutSecs, ns, name, gvr, condition)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, string, string, schema.GroupVersionResource, k8s.ConditionFunction) bool); ok {
		r0 = rf(timeoutSecs, ns, name, gvr, condition)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string, schema.GroupVersionResource, k8s.ConditionFunction) error); ok {
		r1 = rf(timeoutSecs, ns, name, gvr, condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
