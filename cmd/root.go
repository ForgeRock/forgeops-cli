package cmd

import (
	"os"

	"github.com/ForgeRock/forgeops-cli/internal/factory"
	"github.com/ForgeRock/forgeops-cli/internal/printer"
	"github.com/rs/zerolog"
	"github.com/spf13/cobra"
	"github.com/spf13/cobra/doc"
	"github.com/spf13/pflag"
	"k8s.io/cli-runtime/pkg/genericclioptions"
	cliflag "k8s.io/component-base/cli/flag"
)

var cfgFile string
var clientFactory factory.Factory
var tag string
var skipUserConfirmation bool
var output string
var logLevel string
var outType printer.OutType

// rootCmd represents the base command when called without any subcommands
var rootCmd = &cobra.Command{
	Use:   "forgeops",
	Short: "forgeops is a tool for managing ForgeRock Identity Platform deployments",
	Long: `
    This tool helps deploy the ForgeRock platform, debug common issues, and validate environments.`,
	DisableAutoGenTag: true,
	SilenceErrors:     true, //We format and print errors ourselves during Execute().
	PersistentPreRun: func(cmd *cobra.Command, args []string) {
		switch output {
		case "text":
			outType = printer.OutText
		case "json":
			outType = printer.OutJson
		default:
			printer.Errorln("Couldn't determine output type")
			os.Exit(1)
		}
		switch logLevel {
		case "none":
			printer.InitLogn(outType, zerolog.Disabled)
		case "debug":
			printer.InitLogn(outType, zerolog.DebugLevel)
		case "info":
			printer.InitLogn(outType, zerolog.InfoLevel)
		case "warn":
			printer.InitLogn(outType, zerolog.WarnLevel)
		case "error":
			printer.InitLogn(outType, zerolog.ErrorLevel)
		default:
			printer.Errorln("Couldn't determine loglevel")
			os.Exit(1)
		}
	},
}

// Doc Generate Documents
func Doc() {
	doc.GenMarkdownTree(rootCmd, "./docs")
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	if err := rootCmd.Execute(); err != nil {
		printer.Errorln(err.Error())
		os.Exit(1)
	}
}

func init() {
	rootCmd.PersistentFlags().StringVar(&logLevel, "log-level", "none", "(options: none|debug|info|warn|error) log statement level. When output=text and level is not 'none' the level is debug")
	rootCmd.PersistentFlags().StringVarP(&output, "output", "o", "text", "(options: text|json) command output type. Type json is intended for use in scripting, text is for interactive usage. Not all commands provide both types of output")
}

func initK8sFlags(flags *pflag.FlagSet) *genericclioptions.ConfigFlags {
	// Install k8s flags
	flags.SetNormalizeFunc(cliflag.WarnWordSepNormalizeFunc) // Warn for "_" flags
	// Normalize all flags coming from other packages. a.k.a. change all "_" to "-". e.g. glog package
	flags.SetNormalizeFunc(cliflag.WordSepNormalizeFunc)
	kubeConfigFlags := genericclioptions.NewConfigFlags(true).WithDeprecatedPasswordFlag()
	kubeConfigFlags.AddFlags(flags)
	// The --cache-dir flag defaults to a local folder which pollutes the autogenerated docs.
	flags.MarkHidden("cache-dir")
	return kubeConfigFlags
}
